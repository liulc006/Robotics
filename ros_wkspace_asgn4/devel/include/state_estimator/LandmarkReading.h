// Generated by gencpp from file state_estimator/LandmarkReading.msg
// DO NOT EDIT!


#ifndef STATE_ESTIMATOR_MESSAGE_LANDMARKREADING_H
#define STATE_ESTIMATOR_MESSAGE_LANDMARKREADING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <state_estimator/Landmark.h>

namespace state_estimator
{
template <class ContainerAllocator>
struct LandmarkReading_
{
  typedef LandmarkReading_<ContainerAllocator> Type;

  LandmarkReading_()
    : landmark()
    , range(0.0)
    , bearing(0.0)  {
    }
  LandmarkReading_(const ContainerAllocator& _alloc)
    : landmark(_alloc)
    , range(0.0)
    , bearing(0.0)  {
  (void)_alloc;
    }



   typedef  ::state_estimator::Landmark_<ContainerAllocator>  _landmark_type;
  _landmark_type landmark;

   typedef double _range_type;
  _range_type range;

   typedef double _bearing_type;
  _bearing_type bearing;





  typedef boost::shared_ptr< ::state_estimator::LandmarkReading_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::state_estimator::LandmarkReading_<ContainerAllocator> const> ConstPtr;

}; // struct LandmarkReading_

typedef ::state_estimator::LandmarkReading_<std::allocator<void> > LandmarkReading;

typedef boost::shared_ptr< ::state_estimator::LandmarkReading > LandmarkReadingPtr;
typedef boost::shared_ptr< ::state_estimator::LandmarkReading const> LandmarkReadingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::state_estimator::LandmarkReading_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::state_estimator::LandmarkReading_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::state_estimator::LandmarkReading_<ContainerAllocator1> & lhs, const ::state_estimator::LandmarkReading_<ContainerAllocator2> & rhs)
{
  return lhs.landmark == rhs.landmark &&
    lhs.range == rhs.range &&
    lhs.bearing == rhs.bearing;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::state_estimator::LandmarkReading_<ContainerAllocator1> & lhs, const ::state_estimator::LandmarkReading_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace state_estimator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::state_estimator::LandmarkReading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::state_estimator::LandmarkReading_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_estimator::LandmarkReading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_estimator::LandmarkReading_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_estimator::LandmarkReading_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_estimator::LandmarkReading_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::state_estimator::LandmarkReading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6297115c9296944dda00cf56fb301f4";
  }

  static const char* value(const ::state_estimator::LandmarkReading_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6297115c9296944ULL;
  static const uint64_t static_value2 = 0xdda00cf56fb301f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::state_estimator::LandmarkReading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "state_estimator/LandmarkReading";
  }

  static const char* value(const ::state_estimator::LandmarkReading_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::state_estimator::LandmarkReading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The landmark for which this reading was created\n"
"state_estimator/Landmark landmark\n"
"\n"
"# The range from the robot's location to the landmark above\n"
"float64 range\n"
"\n"
"# The bearing of this landmark relative to the robot's orientation\n"
"float64 bearing\n"
"\n"
"================================================================================\n"
"MSG: state_estimator/Landmark\n"
"# The x coordinate of this landmark\n"
"float64 x\n"
"\n"
"# The y coordinate of this landmark\n"
"float64 y\n"
"\n"
;
  }

  static const char* value(const ::state_estimator::LandmarkReading_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::state_estimator::LandmarkReading_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.landmark);
      stream.next(m.range);
      stream.next(m.bearing);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LandmarkReading_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::state_estimator::LandmarkReading_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::state_estimator::LandmarkReading_<ContainerAllocator>& v)
  {
    s << indent << "landmark: ";
    s << std::endl;
    Printer< ::state_estimator::Landmark_<ContainerAllocator> >::stream(s, indent + "  ", v.landmark);
    s << indent << "range: ";
    Printer<double>::stream(s, indent + "  ", v.range);
    s << indent << "bearing: ";
    Printer<double>::stream(s, indent + "  ", v.bearing);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STATE_ESTIMATOR_MESSAGE_LANDMARKREADING_H
